WEBVTT
Kind: captions
Language: pt

1
00:00:04.471 --> 00:00:05.839
Neste vídeo, nós iremos

2
00:00:05.839 --> 00:00:08.975
discutir os tipos de problemas que o Inner Source pode resolver.

3
00:00:09.809 --> 00:00:13.446
Nós faremos isso ao apresentar um hipotético, mas confiável

4
00:00:13.446 --> 00:00:15.248
cenário de colaboração.

5
00:00:15.248 --> 00:00:19.886
Nós examinaremos abordagens comuns que times tem nesse tipo de situação,

6
00:00:19.886 --> 00:00:23.390
as vantagens e desvantagens de cada abordagem.

7
00:00:24.157 --> 00:00:27.527
E essa conversa irá nos ajudar a tirar conclusões e lições

8
00:00:27.660 --> 00:00:30.063
sobre o Inner Source.

9
00:00:30.063 --> 00:00:34.000
Imagine dois times com um produzindo software

10
00:00:34.000 --> 00:00:37.037
que é consumido por outro para fazer isso funcionar.

11
00:00:37.203 --> 00:00:41.641
Imagine um time produzindo uma API que outro time

12
00:00:41.641 --> 00:00:44.010
produzindo a experiência do usuário consume

13
00:00:45.445 --> 00:00:48.448
de tempos em tempos para entregar funcionalidades desejadas.

14
00:00:48.481 --> 00:00:51.251
A experiência talvez precise fazer uma solicitação

15
00:00:51.251 --> 00:00:53.753
para a nova funcionalidade da API.

16
00:00:54.454 --> 00:00:58.558
De tempos em tempos, a API estará apta a entregar essa funcionalidade solicitada.

17
00:00:58.825 --> 00:01:00.126
Sem problemas.

18
00:01:00.460 --> 00:01:03.296
Todavia, dependendo das agendas

19
00:01:03.463 --> 00:01:05.832
ou outras situações prioritárias,

20
00:01:06.132 --> 00:01:09.969
talvez haja vezes em que a nova funcionalidade não pode ser entregue rapidamente.

21
00:01:11.004 --> 00:01:12.739
Neste cenário,

22
00:01:12.739 --> 00:01:15.475
a experiência precisará escolher entre algumas opções

23
00:01:16.309 --> 00:01:18.645
A primeira é chamada “Wait it Out”.

24
00:01:19.646 --> 00:01:23.850
Nesta abordagem, a experiência não faz nada, e simplesmente espera, torcendo

25
00:01:23.850 --> 00:01:28.254
para que a API eventualmente preencha sua solicitação de feature.

26
00:01:28.922 --> 00:01:32.158
Agora, a vantagem é que isso provavelmente requer

27
00:01:32.158 --> 00:01:36.529
pelo menos um pouco de trabalho extra por parte da experiência.

28
00:01:37.297 --> 00:01:40.934
No entanto, há uma clara desvantagem, em que a experiência não

29
00:01:40.934 --> 00:01:43.837
consegue sua funcionalidade desejada. Pelo menos não agora.

30
00:01:44.304 --> 00:01:48.875
E, dependendo da futura priorização por parte da API,

31
00:01:49.275 --> 00:01:51.711
essa feature talvez não seja entregue de forma alguma.

32
00:01:53.179 --> 00:01:56.516
Uma outra abordagem é chamada de “Workaround”.

33
00:01:57.584 --> 00:02:01.521
Nessa abordagem, a experiência talvez tenha algum trabalho extra

34
00:02:01.521 --> 00:02:05.325
para compensar a falta da funcionalidade solicitada.

35
00:02:05.892 --> 00:02:09.562
Isso talvez gere trabalho extra em seu próprio projeto

36
00:02:09.829 --> 00:02:12.999
ou talvez eles iniciem um novo projeto que dê a eles a feature

37
00:02:12.999 --> 00:02:15.602
que eles estavam procurando por outros meios.

38
00:02:16.669 --> 00:02:17.137
O benefício

39
00:02:17.137 --> 00:02:20.006
aqui é que a experiência pode ter o que quiser

40
00:02:20.373 --> 00:02:23.076
quando quiser, e através de seu próprio esforço.

41
00:02:23.143 --> 00:02:25.145
Sem depender de outro time.

42
00:02:25.912 --> 00:02:28.114
No entando, há sérias desvantagens.

43
00:02:28.114 --> 00:02:30.783
A experiência inadvertidamente, inscreveu-se

44
00:02:30.783 --> 00:02:34.154
para a difícil e pesada tarefa de manter este novo código.

45
00:02:34.621 --> 00:02:37.891
Esse código que, de tempos em tempos, não está sob o domínio

46
00:02:37.891 --> 00:02:40.894
da competência principal de seu time.

47
00:02:40.894 --> 00:02:44.097
Em adição, outros times da companhia que tem o mesmo problema

48
00:02:44.364 --> 00:02:47.700
estão inaptos a utilizar essa solução em específico.

49
00:02:48.234 --> 00:02:52.805
E a companhia como um todo tem adquirido códigos e projetos duplicados

50
00:02:53.139 --> 00:02:56.042
na mesma área do problema em que tem trabalhado

51
00:02:56.042 --> 00:02:59.245
de forma repetidamente ordenada.

52
00:02:59.245 --> 00:03:02.148
Outra abordagem é chamada “Escalate”.

53
00:03:03.149 --> 00:03:05.251
Que escala a experiência.

54
00:03:05.451 --> 00:03:09.489
Não leva “não” como resposta, mas tenta influenciar a API

55
00:03:09.489 --> 00:03:13.593
para reconsiderar e priorizar sua solicitação de funcionalidade.

56
00:03:14.727 --> 00:03:15.628
De tempos em tempos,

57
00:03:15.628 --> 00:03:20.600
este apelo é feito por alguém na gestão hierárquica da API.

58
00:03:21.201 --> 00:03:24.771
É comum que a solicitação venha de alguém na gestão hierárquica

59
00:03:25.038 --> 00:03:26.172
da experiência.

60
00:03:26.172 --> 00:03:29.075
Vamos juntar os chefões, fazer eles falarem.

61
00:03:30.109 --> 00:03:34.380
A potencial vantagem é que a experiência pode ter o que quiser,

62
00:03:34.681 --> 00:03:37.684
quando quiser, sem precisar

63
00:03:37.684 --> 00:03:39.786
manter o novo código no longo prazo.

64
00:03:40.687 --> 00:03:42.722
Há sérias desvantagens.

65
00:03:42.722 --> 00:03:46.459
Na prática, o processo de escalonamento tende

66
00:03:46.593 --> 00:03:50.230
a ter alta fricção e ocupar um longo período de tempo.

67
00:03:50.763 --> 00:03:56.102
E este tempo é gasto por engenheiros competentes e líderes de engenharia

68
00:03:56.102 --> 00:03:59.939
o tempo deles é gasto com improdutivas e fora da engenharia

69
00:03:59.939 --> 00:04:02.508
tarefas de escalonamento.

70
00:04:03.209 --> 00:04:06.279
Este processo ocupa tanto tempo que não escala.

71
00:04:06.512 --> 00:04:10.416
Um time que continuamente advoga pelo o que precisa

72
00:04:10.683 --> 00:04:15.355
via escalonamento irá simplesmente o perder tempo e a credibilidade social

73
00:04:15.355 --> 00:04:16.422
que ela precisa.

74
00:04:17.857 --> 00:04:20.260
Essa conversa nos ensina sobre Inner Source,

75
00:04:20.560 --> 00:04:25.398
e esse Inner Source irá aplicar para o mesmo tipo de situação

76
00:04:25.999 --> 00:04:30.937
em que um time produzindo software está inapto a entregar a funcionalidade

77
00:04:31.170 --> 00:04:34.007
que um time que está consumindo ela precisa.

78
00:04:34.007 --> 00:04:38.845
O que o Inner Source faz é prover um jeito para o time que consome ter os benefícios

79
00:04:39.045 --> 00:04:42.615
de esperar (Wait it Out), trabalhar (Workaround) e escalar (Escalate) sem

80
00:04:42.615 --> 00:04:44.484
essas desvantagens associadas.

