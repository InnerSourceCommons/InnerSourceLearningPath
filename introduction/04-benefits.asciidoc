== What are the benefits of InnerSource?

There are many benefits to collaborating via InnerSource.
InnerSource gives a company a scalable strategy for *guest teams to get feature requests when they need them* without the long-term burden of maintenance.
The company as a whole wins as the time of guest teams is put into code that others can use.

While that result is a shining benefit of InnerSource, there are many benefits to hosts that receive regular InnerSource contributions.
Recall that, as part of the InnerSource process, the product owner on the host team agrees from the outset that contributed features are good and desirable.
InnerSource allows the host team to receive *help in creating a better product* for its consumers!

*InnerSource provides the host team a scalable strategy* for fulfilling varying amounts of features requested from its many consumers.
Given the fixed capacity of the full-time members of the host team, it's likely that, at times, the combined business roadmaps of its consumers will require very (or even unreasonably) large amounts of work to be done in the host team's products.
Without InnerSource, this situation easily leads to a stressed, overworked team dealing with many feature requests escalated to its leaders.

However, if the host team operates via InnerSource, the engineering resources required to build those features will appear in proportion to their importance in the form of guest contributors.
*InnerSource becomes a force multiplier* that allows the host team to temporarily act larger than its actual size during times of high demand.
When the demand has ended, the team throughput scales back to normal levels, all without any micromanagement of team headcount or work items.
InnerSource allows engineering time to organically flow where the organization needs it at a given time.

Beyond the raw work that the host team is able to accomplish in its system, regular InnerSource contributions give the host team *better requirements and prioritization alignment with all of its consumers*.
A host team can do its best requirements gathering on the work it produces, but when the consumer itself is the one submitting the work the chances are much higher that the resulting change is aligned to just what the consumer needs.
While it may be only one single guest team submitting the change, that team is likely representative of many other consumers.

In addition to this alignment, there is also a general training and education of https://innersourcecommons.org/learn/learning-path/contributor[contributors] as they work with and learn from https://innersourcecommons.org/learn/learning-path/trusted-committer[trusted committers].
This interaction helps contributors to learn and grow in their career, resulting in *higher job satisfaction*.
Project documentation improves to enable these contributions at scale.
Contributors feel a stake in the host team project.
It's something that they recommend to their colleagues or new teams that they join.
They understand the project better and are able to answer questions about it to others, relieving the host team of some of that burden.
More people contributing to a project naturally cross-pollinate ideas from all over the company.
This learning and cross-team alignment over time serves to *break down traditional company silos*.
