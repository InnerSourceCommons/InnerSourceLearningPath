== What are the benefits of InnerSource?

There are many benefits to collaborating via InnerSource.
InnerSource gives a company a scalable strategy for *guest teams to get feature requests when they need them* without the long-term burden of maintenance.
The company as a whole wins as the time of guest teams is put into code that others can use.

While that result is a shining benefit of InnerSource, there are many benefits to hosts that receive regular InnerSource contributions.
Recall that, as part of the InnerSource process, the product owner on the host team agrees from the outset that contributed features are good and desirable.
InnerSource allows the host team to receive *help in creating a better product* for its consumers!

*InnerSource provides the host team a scalable strategy* for fulfilling varying amounts of features requested from its many consumers.
Given the fixed capacity of the full-time members of the host team, it's likely that, at times, the combined business roadmaps of its consumers will require very (or even unreasonably) large amounts of work to be done in the host team's products.
Without InnerSource, this situation easily leads to a stressed, overworked team dealing with many feature requests escalated to its leaders.

However, if the host team operates via InnerSource, the engineering resources required to build those features will appear in proportion to their importance in the form of guest contributors.
*InnerSource becomes a force multiplier* that allows the host team to temporarily act larger than its actual size during times of high demand.
When the demand has ended, the team throughput scales back to normal levels, all without any micromanagement of team headcount or work items.
InnerSource allows engineering time to organically flow where the organization needs it at a given time.

Beyond the raw work that the host team is able to accomplish in its system, regular InnerSource contributions give the host team *better requirements and prioritization alignment with all of its consumers*.
A host team can do its best requirements gathering on the work it produces, but when the consumer itself is the one submitting the work the chances are much higher that the resulting change is aligned to just what the consumer needs.
While it may be only one single guest team submitting the change, that team is likely representative of many other consumers.

In addition to this alignment, there is also a general training and education of https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/contributor/01-introduction-article.asciidoc[contributors] as they work with and learn from https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/trusted-committer/01-introduction.asciidoc[trusted committers].
This interaction helps contributors to learn and grow in their career, resulting in *higher job satisfaction*.
Project documentation improves to enable these contributions at scale.
Contributors feel a stake in the host team project.
It's something that they recommend to their colleagues or new teams that they join.
They understand the project better and are able to answer questions about it to others, relieving the host team of some of that burden.
More people contributing to a project naturally cross-pollinate ideas from all over the company.
This learning and cross-team alignment over time serves to *break down traditional company silos*.


=== InnerSource有什么好处?
通过InnerSource进行协作有很多好处。InnerSource为公司提供了一个可扩展的策略，以便客人团队在需要的时候获得特性请求，而无需承担长期的维护负担。当客人团队的时间被放入其他人可以使用的代码中时，整个公司就赢了。

虽然这个结果是来自InnerSource的一个闪亮的好处，但是对于那些定期接受内部资源贡献的主机来说有很多好处。回想一下，作为InnerSource过程的一部分，主人团队的产品所有者从一开始就认为贡献的特性是好的和可取的。InnerSource允许主机团队获得帮助，为其用户创建更好的产品!

InnerSource为主人团队提供了一种可伸缩的策略，用于满足来自其众多客户的不同数量的功能需求。考虑到主人团队全职成员的固定容量，很可能在某些时候，其消费者的组合业务路线图将需要(甚至不合理地)在主机团队的产品中完成大量的工作。如果没有内部资源，这种情况很容易导致一个压力大、工作过度的团队处理许多特性请求，并将其升级到其领导。

但是，如果主人团队通过InnerSource进行操作，那么构建这些特性所需的工程资源将以客座贡献者的形式按其重要性的比例出现。 InnerSource成为一个力量倍增器，允许主人团队在高需求时临时采取比实际规模更大的行动。当需求结束时，团队吞吐量将恢复到正常水平，所有这些都不需要对团队人员总数或工作项进行任何微管理。InnerSource允许工程时间在给定的时间内有机地流到组织需要它的地方。

除了主人团队能够在其系统中完成的原始工作之外，定期的内部资源贡献还为主人团队提供了更好的需求，并使其优先级与所有使用者保持一致。主人团队可以对其生成的工作进行最佳的需求收集，但是当使用者本身提交工作时，结果更改与使用者的需求保持一致的几率要高得多。虽然可能只有一个客人团队提交更改，但该团队可能代表许多其他客户。

除了这种联合之外，还有对贡献者的一般培训和教育，因为他们与受信提交者一起工作并向他们学习。这种互动有助于贡献者在他们的职业生涯中学习和成长，从而获得更高的工作满意度。项目文档的改进使这些贡献能够规模化。贡献者认为主人团队项目是有利害关系的。这是他们向同事或新加入的团队推荐的东西。他们能够更好地理解项目，并能够向其他人回答关于项目的问题，从而减轻主人团队的一些负担。更多的人为一个项目做出贡献，自然会有来自公司各个部门的不同想法相互交流。随着时间的推移，这种学习和跨团队协作有助于打破传统的公司壁垒。

