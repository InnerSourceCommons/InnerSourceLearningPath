== Приемущества InnerSource

При работе по InnerSource есть много преимуществ.
InnerSource даёт компании масштабируемый способ *гостевым командам получить желаемый функционал в нужный момент* без необходимости долгосрочной поддержки этого функционала.
Организация в целом остаётся в выигрыше, так как гостевые команды инвестируют время в код, который могут использовать другие команды.

В то же время бонусы от InnerSource получают также и хост-команды, так как в их репозиторий регулярно поступает код от внешних команд. 
В самом начале процесса взаимодействия по InnerSource гости согласовывают поступаемый функционал и, благодаря этому, новые функции ожидаемые и полезные.
С помощью InnerSource хост-команды *улучшают продукт* за счёт внешних ресурсов.

*InnerSource даёт хост-командам масштабируемый способ* выполнения поступаемых от многочисленных потребителей запросов на новый функционал.
Пропускная способность хост-команды фиксирована, а обьём поступаемых запросов на доработки варьируется и зачастую превышает возможности команды.
Это в свою очередь приводит к напряжению в команде и переработкам. Новый функционал зачастую продвигается через эскалацию, что негативно сказывается на рабочем процессе.

В случае с InnerSource, необходимые для разработки инженерные ресурсы могут обеспечиваться силами команд, запрашивающими функционал.
*InnerSource увеличивает пропускную способность*, позволяя командам в период высокого спроса увеличивать доступные ресурсы. 
Когда спрос спадёт, пропускная способность вернётся в обычный режим без необходимости в управлении численностью команд или количеством задач.
InnerSource способствует органичному перетеканию инженерных ресурсов туда, где в конкретное время в компании есть потребность.

Помимо дополнительных ресурсов, постоянные InnerSource контрибьюции *улучшают постановку требований и балансируют приоритизацию между всеми потребителями*.
В случае, когда команда-потребитель сама отправляет контрибьюции, новый функционал более согласован с их реальными потребностями, чем когда команда хозяев собирает и реализует требования от внешних команд.
Даже в тех случаях, когда изменение было отправлено одной внешней командой, есть большая вероятность, что оно представляет интересы сразу нескольких потребителей.

В дополнение к этому, https://innersourcecommons.org/learn/learning-path/contributor[_Контрибьюторы_] повышают свои профессиональные навыки работая вместе с https://innersourcecommons.org/learn/learning-path/trusted-committer[_Trusted Committers_].
Это взаимодействие способствует обучению контрибьюторов и позволяет расти по карьерной лестнице, и, как результат, получать *большее удовольствие от работы*.
Повышается качество документации.
Контрибьюторы чувствуют принаджежность к проекту, в который отправляют код.
Они понимают проект лучше и сами способны ответить на вопросы по нему, тем самым облегчая работу команде хозяев.

Чем больше людей участвуют в создании продукта, тем больше появляется идей по улучшению.
Обучение через контрибьюции и совместная работа *разрушает башни знаний*, при которых важные знания компании хранятся у ограниченного круга лиц.