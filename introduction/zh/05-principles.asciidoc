== InnerSource principles

Every company, team, project, and individual is different.
Because of that fact, the exact way that the concept of InnerSource works will vary from one situation to another.
At its core, however, are four principles that form the bedrock of any successful instance of InnerSource.
These principles have inspiration in successful open source projects and are required in order for InnerSource to achieve the benefits described earlier.

The principles are:

* *Openness*
* *Transparency*
* *Prioritized Mentorship*
* *Voluntary Code Contribution*

Let's take a look at each of these principles in more detail.

=== Openness

The configuration of an open project enables frictionless contributing.
Projects should be discoverable and well-documented through README.md and CONTRIBUTING.md files within the root of the repo.
Anyone within an organization should be able to find a desired project and ramp up without an inordinate amount of direct guidance from host team members.
Host team contact information should be prevalent with as many channels as makes sense for the project.
Host team intentions to accept InnerSource contributions to their project should be shared through relevant organization channels to raise awareness.
Particularly in smaller settings you may want to establish a regular "broadcast" on the InnerSource work your team is doing.
In larger settings, however, such broadcast may create a lot of noise, and it may be more approproate to make sure the project is discoverable in a easy-to-use tool.
Remember, the goal is awareness use the appropriate channels that work in YOUR company.

By no means is the above an exhaustive list.
Project openness will typically be directly related to how successful a project is in terms of InnerSource.
The more open it is, the fewer barriers are put in place for prospective contributors.
The less open it is, the more difficult it becomes for anyone to contribute.

=== Transparency

In order for guest teams to be able to contribute meaningfully to a project, the host team must be _transparent_.
This means that guest teams should be able to have an understanding of:

* The project/repo and its direction
* Outstanding feature requirements
* Progress on feature requirements
* Decision making of the host team

When possible, the above should be communicated clearly and in detail, from teams' internal definitions of items to special-case scenarios specific to the project.
This communication should be done in a manner that can be easily queried and understood to those that are not part of the core team.

=== Prioritized Mentorship

_Mentorship_ from host team to guest team via https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/trusted-committer/01-introduction.asciidoc[trusted committers] is a key aspect of InnerSource.
https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/contributor/01-introduction-article.asciidoc[Contributors] on guest teams are upleveled so that they understand enough about the host team's project/repo to change it successfully.
In the process of doing so, they come to better understand the host team's software system as a general consumer and ambassador for the project/software.
This individual contributor can, over time and with experience, take on a broader role in the project as a trusted committer.

It's critical that this mentorship for contributors is _Prioritized_ by the host team.
The host team should strive to make time to mentor guest team contributors _at the time that the contributor needs it_ as opposed to when it's convenient to the host team.
At times it may be a culture change for engineers on the host team to spend time helping others to code rather than just coding themselves.
This mentorship is valuable to both the individual contributor and the host, and it is worth doing well.
It proves to be mutually beneficial in the long run. By improving the code, the contributor forges or
improves relationships within an organization that may not have existed otherwise.
Open source readily recognizes this point and considers it as an honor to achieve trusted committer status on a project.

=== Voluntary Code Contribution

The first word _Voluntary_ means that engagement in InnerSource from both the guest and host teams occurs of their own free will.
The guest team voluntarily donates code to the host team and the host team voluntarily accepts it.
This opt-in nature means that each team needs to be certain that their involvement adds value to the others' objectives.
Never is a host team required to accept a contribution that isn't in ultimate alignment with their overall mission.
Never is a guest team required to submit a contribution that doesn't ultimately further their own mission and priorities.

The word _Code_ emphasizes that the collaboration between guest and host goes all the way to the code.
Guest involvement in opening issues, updating requirements, fixing docs, etc. is good, but collaboration needs to reach as far as submitting code to achieve all of the benefits that we've discussed.


=== InnerSource的原则
每个公司、团队、项目和个人都是不同的。由于这个事实，内部源的工作方式在不同的情况下会有所不同。然而，其核心是构成任何成功的InnerSource实例的四个原则。这些原则对成功的开源项目有启发，为了使InnerSource获得前面描述的好处，这些原则是必需的，它包括：

* *开放*
* *透明度*
* *优先辅导*
* *自愿贡献*

让我们更详细地看看这些原则：

=== 开放
开放式项目的配置可以实现无摩擦贡献。项目应该通过在主仓库的README.md和贡献者.md中被发现，并得到良好的文档记录。组织中的任何人都应该能够找到想要的项目，并且不需要过多的来自主人团队成员的直接指导。主人团队的联系信息应该在对项目有意义的尽可能多的渠道中流行。宿主团队接受来自内部的对项目的贡献的意图应该通过相关组织渠道来共享，以提高意识。特别是在较小的设置中，您可能希望在您的团队正在进行的内部源工作上建立一个定期的“广播”。但是，在较大的环境中，这样的广播可能会产生很多噪音，而且更适合确保项目可以在一个易于使用的工具中被发现。记住，我们的目标是让员工意识到，要利用公司里的适当渠道。

以上绝不是一份详尽的清单。项目的开放性通常与项目内部资源的成功程度直接相关。它越开放，对潜在的贡献者设置的障碍就越少。它越不开放，任何人就越难做出贡献。

=== 透明度
为了让客人团队能够对项目做出有意义的贡献，主人团队必须是透明的。这意味着客人团队应该能够理解:

* 项目/仓库和它的指引
* 杰出的功能需求
* 特性需求的进展
* 主人团队的决策

在可能的情况下，从团队对项目的内部定义到特定于项目的特殊情况场景，都应该清晰而详细地传达上述内容。这种沟通应该以一种容易被非核心团队成员查询和理解的方式进行。

=== 优先辅导
通过受信任提交者 https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/trusted-committer/01-introduction.asciidoc[Trusted Committers] ，从主人团队到客人团队的指导是InnerSource的一个关键方面。客人团队中的贡献者 https://github.com/InnerSourceCommons/InnerSourceLearningPath/blob/master/contributor/01-introduction-article.asciidoc[Contributors] 被提升，这样他们就足够了解主人团队的项目/仓库，从而能够成功地更改它。在这个过程中，他们作为项目/软件的一般消费者和大使，更好地理解了主人团队的软件系统。随着时间的推移和经验的积累，这个独立的贡献者可以在项目中扮演更广泛的角色，成为一个受信任提交者。

重要的是，主人团队应该优先考虑这种对贡献者的指导。主人团队应该努力在贡献者需要的时候，而不是在主人团队方便的时候，抽出时间来指导客人团队的贡献者。有时，对于主人团队的工程师来说，花时间帮助其他人编码而不是自己编码可能是一种文化上的改变。这种指导对个人和主人都很有价值，值得好好做。从长远来看，这对双方都是有利的。通过改进代码，贡献者可以伪造或改进组织中原本不存在的关系。开源很容易认识到这一点，并将其视为在项目中实现受信任提交者状态的荣誉。

=== 自愿贡献
第一个词“自愿”是指来自客队和东道主队的内部参与是出于他们自己的自由意志。来宾团队自愿向主机团队捐赠代码，主机团队也自愿接受代码。这种选择加入的性质意味着每个团队需要确定他们的参与为其他团队的目标增加了价值。主机团队从来没有被要求接受与他们的整体任务不一致的贡献。客人团队从来没有被要求提交一份最终不会促进他们自己的任务和优先级的贡献。

Code这个词强调的是客人和主人之间在代码上的顺畅协作。在开放问题、更新需求、修复文档等方面的客户参与是好的，但是协作需要达到提交代码以实现我们讨论过的所有好处。


