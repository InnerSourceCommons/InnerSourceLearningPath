== Das Ethos eines Contributors

Im vorangegangenen Kapitel haben wir beschrieben warum es sinnvoll ist, Komponenten wiederzuverwenden und als Contributor aktiv zu werden.
Die besten Methoden, um Deine Änderungen erfolgreich im Projekt des Hostteams einzubringen, beschreiben wir in diesem Kapitel. 

Wenn ein Contributor im Sinne von InnerSource zum Projekt des Hostteams beiträgt, ist er im Prinzip ein Gast im Hostteam. Im Allgemeinen wird von einem guten Gast erwartet, dass er sich entsprechend verhält:

* Gäste klopfen an.
* Gäste kennen und befolgen die Regeln des Gastgebers.
* Gäste wissen, dass sie nicht der Eigentümer sind und verhalten sich entsprechend.

Wie nun werden diese Erwartungen in InnerSource Projekten angewandt?

=== Wie fange Ich an?

Wenn Du Deine Nachbarn besuchst wirst Du wahrscheinlich ihr Haus nicht betreten, ohne geklopft zu haben oder an der Tür zu läuten, selbst wenn die Tür offen steht. Ebenso wirst Du in einem InnerSource Projekt nicht direkt im Code Repository Änderungen machen können oder dazu eingeladen werden.

Stattdessen musst Du Deine Änderungen am Projektcode mit einem Pull-Request übermitteln. Ähnlich wie Du nicht einfach beim Nachbarn anfängst, große Umbauten vorzunehmen oder was Du für Verbesserungen hältst, solltest Du Dir die Zusammenarbeitsregeln vorher angeschaut haben und befolgen. Im Gegenzug werden Dir die Gastgeber den Weg zeigen - im Kontext von InnerSource Projekten bedeutet das, dass die dort benannten Trusted Committer als Mentoren für die Contributoren bereit stehen.

Stell Dir eine gelungene Gartenparty vor. Dabei fällt für gewöhnlich im Vorfeld einiges an Planung an, z.B. um das richtige Datum zu finden, für ausreichend Essen und Trinken zu sorgen, oder dafür, dass die Gäste dazu z.B. mit Salaten beitragen. Das Gleiche geschieht bei größeren Änderungen in InnerSource Projekten: Das Projekt wird Dich aller Voraussicht nach vor einer größeren Änderung um eine genauere Beschreibung bitten, was du benötigst und wie Deine vorgeschlagene Lösung aussieht. Der Contributor spart sich viele Iterationen, wenn man sich das Zieldesign zuerst genauer anschaut, anstatt direkt in die Implementierung zu springen. Eine frühzeitige gemeinsame Abstimmung - selbst wenn noch nicht alle Fragen geklärt sind - hilft dem Hostteam den Contributor dabei zu unterstützen, eine bessere Lösung zu entwickeln. Ähnlich wie es in https://cwiki.apache.org/confluence/display/solr/HowToContribute[Yonik's law of unfinished
patches] erklärt wird: "Ein halbgarer Patch in Jira ohne Dokumentation, ohne Tests und ohne Abwärtskompatibilität ist besser als überhaupt kein Patch"

Heißt das, dass in InnerSource Projekten kein Wert auf persönliche Gespräche gelegt wird? Nicht ganz: persönliche Gespräche sind wichtig. Jedweder geschriebener Kommunikation fehlt eine ganze Menge an Informationen im Vergleich zu einem persönlichen Treffen: Man sieht keine Geste oder Mimik und auch die Tonlage geht verloren. Persönliche Treffen sind insbesondere wichtig für zwischenmenschliche Aufgaben, Konflikte und Missverständnisse aufzulösen. Trotzdem sollten die Kommunikation von Projektentscheidungen in schriftlicher Form erfolgen, so dass auch andere teilhaben und Einfluss nehmen können und damit es sogar Jahre später möglich ist, nachzuverfolgen, warum bestimmte Entscheidungen getroffen wurden. 

Hier unsere allgemeine Daumenregel: Trefft Euch von Zeit zu Zeit bei einem Kaffee. Das hilft ein stärkeres Gemeinschaftsgefühl zu entwickeln, insbesondere wenn das Team auf verschiedene Standorte verteilt ist. Stellt sicher, dass alle Entscheidungen für jeden transparent und asynchron getroffen werden, so dass jeder, eingeschlossen derer, die nur nebenbei zuhören (https://en.wikipedia.org/wiki/Lurker[lurking]), jederzeit aktiv und Contributor werden kann. Ein Beispiel dafür, wie weit diese Entscheidungsfindung getrieben werden kann, findet man in mehreren Übungen in https://opensource.com/open-organization/resources/workbook[Open Organization
Workbook].

Wie aber findest Du die zukünftige Richtung eines Projekts heraus, und ob ein InnerSource Projekt bereit ist Änderungen zu diskutieren? Viele InnerSource Projekte beschreiben in ihrem README.md wie sie sich die ersten Schritte in der Zusammenarbeit mit möglichen Contributoren vorstellen. Falls das README.md darüber zu groß wird, werden die Richtlinien für Contributoren oft in ein File namens CONTRIBUTING.md ausgelagert. Das Befolgen dieser Richtlinien hilft Contributoren ungemein dabei, Ihre Ideen dem Projekt nahe zu bringen.

Sei bei allen Interaktionen mit dem Hostteam vorbereitet, das Team von den Vorteilen deines Beitrags zu überzeugen. Formuliere den Wert, der Dein Beitrags für das Ökosystem bringt. 

Das Hostteam wird die Pflege und Wartung für Deine Änderungen übernehmen. Es macht Sinn, für deinen Beitrag eine https://patterns.innersourcecommons.org/p/30-day-warranty[30-day warranty] anzubieten. Dies kann die Angst des Hostteams mildern, nicht in der Lage zu sein, dass der Contributor nach der Änderung nicht mehr zur Behebung von Fehlern zur Verfügung steht.


=== Anticipate and follow house rules

When you are visiting your neighbors, they will likely help you around in their
apartment: they'll show you the way to their living room and where the restroom
is located. If you're staying longer, they will probably
give you more details: in my case an example would be to avoid turning on
the dishwasher and the electric kettle at the same time to avoid blowing the
fuse.

Similarly, every software system comes with its own quirks and intricacies.
Often the most obvious ones are well documented. In smaller projects this
documentation can be found in the README.md. In larger ones, contribution
specific documentation can often be found in the CONTRIBUTING.md document.

In these files you can expect to find information on how to
check out and build the project, how to run the test suite, how to submit changes
to the project. It may point you to further documentation if it
deviates largely from standard tooling - or if there are things you should keep
in mind when making changes.

Going through that documentation usually turns out to be a huge time saver as it
stops you from going down the wrong path and warns you about dead ends. If you
find that things are missing from it based on your experience - patches to that
documentation are typically very welcome: there's nobody better suited to
improve it than a new contributor who sees the project for the first time.

Try to figure out together with the project in their preferred communication
channel if the changes you have in mind make sense overall. At the beginning it
can be scary to have these conversations in a company public medium that is
archived and searchable. The benefit here is with others coming after you with
similar proposals: instead of walking the exact same path again, they can learn
what was already discussed, and start from there.

=== Understand they are not the home owner and act accordingly.

Being a Contributor essentially means being closer to the host team than
someone merely requesting a feature. Still, Contributors are not accountable for
the software project to which they are contributing.

As a result, the final call on what the contribution must look like is with the
host team. It helps to approach the host team with a humble
mindset, with the assumption that all are collaborating towards the purpose of
the shared organisation. It helps to be open and transparent - not only about
what was implemented and how, but also why the change was needed.

Treat any feedback as a gift: others are trying to improve your solution, saving
you from trouble further down the road.

There is a chance that the host team does not accept your contribution at all.
In that case it helps to work with the team, figure out if there is a sub aspect
of your need that can be solved in their project.  Collaborate on that sub
aspect, and then find another way to solve the remaining issues on your end.

## Summary of this segment

In this segment we have learned how to best approach an InnerSource project as a
Contributor. We also looked at how to best communicate our need for the change
and work on the solution together with the host team.