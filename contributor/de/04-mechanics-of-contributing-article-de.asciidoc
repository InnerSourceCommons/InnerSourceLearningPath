== Praktische Details der Contributor Rolle

Sind Sie bereit, einen Beitrag zu Projekten/Repos anderer Teams zu leisten?
Freuen Sie sich darauf, Ihre Blockaden nicht durch Management-Eskalation, sondern durch Zusammenarbeit abzubauen?
In diesem Abschnitt finden Sie praktische Ratschläge und Hinweise, was Sie bei einem InnerSource-Beitrag beachten müssen. Er ermöglicht es Ihnen und dem Gastgeberteam, eine möglichst angenehme Erfahrung zu machen, die die Grundlage für weitere Beiträge und eine gute Zusammenarbeit bildet.

Dieser Artikel ist in drei Schritte unterteilt, die Sie wahrscheinlich erleben werden

* <<vorbereitungen-für-die-arbeit,Einholen des Beitragsangebots und Vorbereitung auf die Arbeit>>
* <<erstellen-des-pull-requests,Den Beitrag tatsächlich erstellen>>
* <<einreichen-des-pull-requests,Polieren und Verpacken des Geschenks und Überreichen an das Gastgeberteam>>.

Wenn Ihr Beitrag größer ist, werden Sie möglicherweise (einige) dieser Schritte wiederholt durchlaufen, während Sie auf Ihr gemeinsames Ziel hinarbeiten.
Es ist sehr wahrscheinlich, dass sich dabei alles immer natürlicher anfühlen wird - vielleicht werden Sie sich sogar fragen, warum Sie vorher etwas anderes gemacht haben.

=== Vorbereitungen für die Arbeit

==== Vorlaufzeiten

Ein wesentlicher Unterschied ist die Durchlaufzeit.
Bei jedem erstmaligen Beitrag kommen Sie zu einem neuen (Gast-)Team.
Daher müssen Sie deren Codebasis, die verwendeten Technologien und auch deren bevorzugte Entwicklungsumgebung (z. B. Test-Framework, Build-System) kennen lernen.
Selbst in Fällen, in denen diese Art von Tooling standardisiert ist, wird jedes Team einige individuelle Eigenheiten entwickelt haben.
Neben der technischen Seite können Sie auch mit Unterschieden in der Kommunikation konfrontiert werden (z. B. Code-Reviews).
Selbst wenn Sie nach einiger Zeit wiederkommen, haben sich die Arbeitsweise und die Mitglieder der Teams möglicherweise verändert.
Nehmen Sie sich die Zeit, die Sie brauchen würden, wenn Sie sich mit einem Freund zu treffen würden, den Sie schon lange nicht mehr gesehen haben und den Sie jetzt besuchen.

Geben Sie sich genügend Vorlaufzeit.
Beginnen Sie früh genug, damit Ihre Arbeit zu dem Zeitpunkt, an dem Sie sie brauchen, zur Verfügung steht.
Es ist besser, anfangs mehr Zeit einzuplanen - Sie werden ein Gefühl für die Bearbeitungszeiten bekommen, wenn Sie mit dem Gastteam zusammenarbeiten.
Häufig werden Sie feststellen, dass sich die Durchlaufzeiten pro Host-Team verringern, nachdem Sie einige erfolgreiche Beiträge für dieses Host-Team geleistet haben.
Dieser Effekt ist auch bei Open Source zu beobachten, mehr dazu können Sie <<vertrauensbildung-durch-zusammenarbeit,hier>> lesen.

==== Erwartungsmanagement

In Ihren klassischen Teams hatte jeder eine Vorstellung von den erwarteten Durchlaufzeiten.
Im InnerSource-Kontext ist dies möglicherweise nicht der Fall, entweder aufgrund großer Zeitzonenunterschiede (z. B. Seattle, USA mit PDT vs. Berlin, Deutschland mit MESZ) oder weil Sie nicht wie Ihr ursprüngliches Team Vollzeit zur Verfügung stehen, selbst wenn sich das Team am selben Ort befindet wie Sie selbst.
Um also Frustration auf beiden Seiten, Ungeduld und andere nicht vertrauensbildende Effekte zu vermeiden, müssen Sie explizit ein Erwartungsmanagement in Bezug auf Ihre erwarteten Reaktionszeiten betreiben.
Eine Möglichkeit ist es, auf das Feedback eines https://innersourcecommons.org/de/learn/learning-path/trusted-committer[_Trusted Committers_] schnell mit einem "Ich kümmere mich darum, werde aber in den nächsten Tagen nicht dazu kommen" zu reagieren, wenn Sie wissen, dass Sie erst in ein paar Tagen darauf zurückkommen können.
Idealerweise können Sie ihm eine grobe Schätzung geben, wann Sie wahrscheinlich Zeit haben werden, um sich seinen Beitrag anzusehen.
Auf diese Weise schaffen Sie Vertrauen durch Verlässlichkeit, selbst bei nicht physischem Kontakt, größeren Entfernungen oder anderen asynchronen Medien.
Auf der Grundlage dieses Vertrauens können Sie Unsicherheiten auf dem vor Ihnen liegenden Weg der Zusammenarbeit überwinden.

==== Vertrauen aufbauen

InnerSource legt großen Wert auf schriftliche Kommunikation - vor allem, wenn es um Projektentscheidungen geht.
Bedeutet das, dass die persönliche Kommunikation verboten ist?

Natürlich nicht: Während die schriftliche Kommunikation im Hinblick auf die Archivierung und Durchsuchbarkeit von Vorteil ist, ist die persönliche Kommunikation im Hinblick auf die Kommunikationsbandbreite von Vorteil.
Versuchen Sie, sich Zeit zu nehmen, um sich mit den Menschen hinter den Namen zu treffen. Wenn möglich, treffen Sie sich mit ihnen bei Ihrem Lieblingsgetränk oder einem Essen.
Wenn Sie die Menschen sprechen hören können und ihre Eigenheiten kennen, wird die Zusammenarbeit aus der Ferne einfacher.

==== Vermeidung von Ablehnung

Haben Sie eine große Funktion, die Sie beisteuern möchten?
Ausgezeichnet!
Wäre es nicht furchtbar, wenn Ihre ganze Arbeit umsonst wäre?
Das kann passieren, wenn das Team des Gastgebers bereits etwas sehr Ähnliches entwickelt, die Software veraltet ist oder das, was Sie vorschlagen, nicht in sein Projekt passt.
Dieses Problem tritt häufig auf, und viele Teambeziehungen haben darunter gelitten, dass man sich nicht im Voraus einig war, dass ein Beitrag gut passt.

Machen Sie sich selbst und das Team des Gastgebers glücklich (und sparen Sie möglicherweise etwas Arbeit), indem Sie die Zustimmung des Teams des Gastgebers zum Benutzer/technischen Design des Beitrags einholen, _bevor_ Sie an den Änderungen arbeiten und einen Pull Request einreichen.
Sie müssen verstehen, wie das Team des Gastgebers möchte, dass Sie dies erreichen.
Am besten fragen Sie einen https://innersourcecommons.org/de/learn/learning-path/trusted-committer[_Trusted Committer_], wie Sie Ihren Vorschlag am besten besprechen können.

Es ist eine immer wieder bewiesene Weisheit aus dem Open Source Bereich, dass, wenn Sie wählen können, wie Sie Ihren Vorschlag diskutieren wollen, Sie versuchen sollten, einen schriftlichen Weg zu wählen.
Idealerweise wählen Sie den Weg, bei dem die Artefakte öffentlich, durchsuchbar und dauerhaft verlinkbar sind, um es zu ermöglichen, in späteren Diskussionen über diesen zukünftigen Beitrag oder andere Beiträge - von Ihnen oder anderen - auf Ihren Vorschlag zu verweisen.

Diese Art von frühzeitiger Einigung auf hohem Niveau spart Zeit bei der Überarbeitung oder Ablehnung Ihres Pull Requests im Nachhinein.

=== Erstellen des Pull Requests

==== Kommunikation und Entblockierung

Großartig, Sie haben sich mit der Herangehensweise des Host-Teams vertraut gemacht und sie freuen sich darauf, Ihren Pull Request zu erhalten.
Welche Stolpersteine warten nun auf Sie?

Erstens werden Sie in weniger direktem Kontakt mit ihnen stehen.  Zweitens wird von Ihnen nicht erwartet, dass Sie so sachkundig und kompetent sind, wie Sie es vielleicht bei den Vollzeitprojekten Ihres Teams sind.
Wie können Sie nun am besten damit umgehen?

Versuchen Sie, die Dokumentation, die Gesprächsarchive und die Code-Artefakte des Gastteams durchzusehen, um sich selbst zu entlasten.
Dies ist ähnlich wie die Situation, in der Sie und wahrscheinlich die meisten Leute sich befinden, wenn sie eines der beliebten OSS-Projekte verwenden.

Ähnlich wie bei Open-Source-Projekten sollten Sie das Host-Team fragen, wenn die Dinge nicht vorankommen, selbst wenn Sie versuchen, die Blockade zu lösen.
Die Fragen, die Sie stellen, und die Antworten, die Sie erhalten, werden anderen helfen, die nach Ihnen kommen, die gleichen Probleme zu lösen.
Stellen Sie sicher, dass Ihre Kommunikation in einem durchsuchbaren Archiv landet, das eng mit dem Projekt selbst verbunden ist.
Sollten Sie einfache Verbesserungsmöglichkeiten sehen, um das besagte Ziel zu erreichen, wenn es noch nicht erreicht ist, können Sie versuchen, Ihrem Gastgeberteam - sehr höflich - eine Verbesserung vorzuschlagen.
Manchmal entsteht der Status quo aus reinem Zufall und bleibt so, weil niemand eine andere Idee hatte oder sich genug dafür interessierte.
In solchen Fällen können Verbesserungsvorschläge willkommen sein.
Es ist für beide Seiten nicht gut, wenn Sie sich ewig mit einem Problem herumschlagen, das in einem kurzen Gespräch mit jemandem, der sich mit dem Projekt besser auskennt, gelöst werden könnte.
Es ist in Ordnung, um Hilfe zu bitten.

Es gibt jedoch einen entscheidenden Unterschied, der Ihnen und anderen Personen in der Zukunft Vorteile bringt:
In fast allen Fällen sollten Sie die offiziellen Kommunikationskanäle des Projekts bevorzugen - das kann eine Mailingliste, ein Chatroom, ein Issue Tracker oder etwas ähnliches sein, je nachdem, ob Sie eine eher synchrone oder asynchrone Art der Interaktion wünschen, oder ob Sie eine Struktur in der Kommunikation brauchen.
Allen gemeinsam ist, dass sie textbasiert, archiviert, durchsuchbar und mit stabilen Links versehen sind - das bedeutet, dass Ihre Frage und die Antwort aufgeschrieben werden und die Referenzen, die Sie in diesen Antworten verlinken, ebenfalls erreichbar bleiben.
Auf diese Weise können Sie bei Ihrer Suche von diesem passiv dokumentierten Wissen profitieren UND künftigen Mitwirkenden helfen, denselben Vorteil zu haben.
Eine solche passive Dokumentation könnte sogar dazu dienen, die "offizielle" Dokumentation zu bereichern, falls sie besonders wertvolle Schätze enthält - wie z.B. wichtige Definitionen, die ad-hoc erstellt wurden.

Wenn Sie bei Ihrer Arbeit auf fehlende (oder veraltete) Dokumentation stoßen, tun Sie dem nächsten Mitwirkenden einen Gefallen und aktualisieren Sie sie mit dem, was Sie entdeckt haben.
Projektteams freuen sich oft über Ergänzungen, Aktualisierungen oder Korrekturen ihrer bestehenden Dokumentation - Sie haben gerade eine weitere Gelegenheit gefunden, einen Beitrag zu leisten!
(Oder geben Sie ihnen einfach höflich ein Feedback über Ihre Erfahrungen und was Ihnen geholfen hätte).

==== Gestaltung des Codes

Jeder von uns hat seine eigenen Vorlieben und Meinungen über den Stil des Codes, die Einrückung, usw.
Das Projekt des Gastteams hat diese ebenfalls.
Versuchen Sie, diese Vorlieben anzupassen, auch wenn es nicht das ist, was Sie normalerweise tun würden, und auch wenn es nicht in der https://innersourcecommons.org/de/learn/learning-path/trusted-committer/05/[_`CONTRIBUTING.md`_] des Projekts angegeben ist.
Wenn Sie unsicher sind, können Sie immer höflich nachfragen. Nichtsdestotrotz ist ein Gastbeitrag für ein Feature oder eine Fehlerbehebung nicht der richtige Zeitpunkt, um eine neue Art der Strukturierung oder Formatierung des Projektcodes einzuführen.

=== Einreichen des Pull Requests

Sie haben alle wesentlichen Arbeiten erledigt, alle Eigenheiten des Problems und des Projekts, zu dem Sie beitragen, herausgefunden, der von Ihnen geplante Zeitpunkt für die Verwendung der neuen Funktion rückt näher, und Sie wollen sicherstellen, dass Ihr Beitrag so schnell und reibungslos wie möglich zusammengeführt wird.

Hier ist, was Sie tun können, um die Überprüfung und Zusammenführung so einfach wie möglich für den https://innersourcecommons.org/de/learn/learning-path/trusted-committer[_Trusted Committer_] und das Host-Team zu machen.
Dies könnte eigentlich ziemlich ähnlich zu dem sein, was Sie vielleicht schon bei Ihrem eigenen Projekt machen, um Ihre Änderungen zu akzeptieren. Wenn das der Fall ist - großartig, dann wird das für Sie selbstverständlich sein!

==== Testen und Automatisierung

Hier geht es im Wesentlichen darum, den https://innersourcecommons.org/de/learn/learning-path/trusted-committer[_Trusted Committer_] in die Lage zu versetzen, den Beitrag ohne Ihre Anwesenheit zu validieren und eine einfache Wartbarkeit zu gewährleisten.
Stellen Sie sich vor, Sie haben eine Funktion oder die Behandlung einer unlösbaren Macke oder eine wichtige Leistungsverbesserung entwickelt, und Ihr Code ist nicht ganz offensichtlich (oder sieht auf den ersten Blick vielleicht sogar hakelig / falsch aus).
Wenn Sie dies mit einem Test abgedeckt haben - und idealerweise in einem Kommentar ein paar Worte über die Gründe dafür verloren haben - wird ein zukünftiger Redakteur an den Zweck des Codes erinnert, und der Test (oder die Tests) wird sicherstellen, dass der Wert, den Ihr Code realisiert, auch in den neuen Implementierungen erhalten bleibt.
Um dies zu erreichen, gehen Sie wie folgt vor:

* Fügen Sie Tests für Ihren Code-Beitrag hinzu, so dass die Überprüfung der Funktion Ihres Beitrags durch andere gut funktioniert, auch nach einiger Zeit, wenn Sie in anderen Projekten arbeiten oder vielleicht aufgehört haben, zu diesem Projekt beizutragen.
 ** Oft haben Projekte automatische Überprüfungen gegen Pull Requests, die diese Tests und den Grad der Codeabdeckung verwenden. Versuchen Sie die Kriterien, die diese Tests erzwingen, zu erfüllen.
* Viele Projekte stellen Build- und Validierungsskripte zur Verfügung, mit denen Sie Ihre Änderungen lokal testen können.
 ** Nutzen Sie diese, um sicherzustellen, dass Ihr Beitrag so gut wie möglich funktioniert, bevor Sie einen Pull Request öffnen.
 ** Fehlerhafte Pull-Requests mit leicht zu behebenden Fehlern zu überprüfen, nervt oft vertrauenswürdige Committer. Sie werden Ihren Code nicht korrigieren, sondern Sie darum bitten. Dies kann zu mehr Umläufen führen und die Zusammenführung verlangsamen.
 ** Niemand ist jedoch perfekt. Tun Sie Ihr Bestes, benutzen Sie vorbereitete Validierungsskripte, wenn es welche gibt, und geben Sie Ihr Bestes mit einem Pull Request!
 ** Wenn Ihr Pull Request immer wieder Tests kaputt macht und Sie nicht herausfinden können, warum, nachdem Sie Ihr Bestes gegeben haben: Versuchen Sie, diese Tests im Kommentar des Pull Requests hervorzuheben, zeigen Sie Ihr aktuelles Verständnis des Problems auf und bitten Sie um Hilfe dabei.
* Vergessen Sie nicht Ihr eigenes Projekt, das Ihren Beitrag überhaupt erst ausgelöst hat. Erstellen Sie einen modifizierten Build des gemeinsamen Projekts mit Ihren Änderungen und probieren Sie ihn in Ihrem eigenen Projekt aus, das ihn verwendet.

==== Dokumentation und Überprüfbarkeit

Sie sollten sicherstellen, dass Ihr Pull-Request alle Aktualisierungen der Dokumentation enthält, die für Ihre Änderungen relevant sind.
Sollte sich die Dokumentation an einem anderen Ort befinden, fügen Sie sie dort hinzu und verlinken Sie sie in Ihrem Pull Request.

Um die eigentliche Überprüfung des Codes für den vertrauenswürdigen Committer oder andere Personen, die den Code überprüfen, so einfach wie möglich zu machen, versuchen Sie diese Hinweise zu befolgen:

* Achten Sie darauf, dass Ihr Pull Request nur die relevanten Änderungen für das zu bearbeitende Problem enthält.
* Versuchen Sie, übergroße Commits, Commits mit unklaren Commit-Nachrichten, Unmengen von Dateien, zusammenhanglose Änderungen (z.B. mehrere Themen berührend) zu vermeiden.
* Beschreiben Sie klar und deutlich, was dieser Pull Request ändert, warum er das tut und auf welche Probleme und Design-Dokumente (falls es welche gab) er sich bezieht.
* Wenn es etwas Ungewöhnliches oder Unerwartetes in dem Pull Request gibt, heben Sie es hervor und geben Sie eine Erklärung. Dies wird es einfacher machen, mögliche blockierende Fragen, die ein Prüfer während der Prüfung haben könnte, zu erörtern und zu lösen.
 ** Dasselbe gilt für das Szenario, in dem Sie sich über die Implementierung oder Ihren Ansatz unsicher waren - heben Sie es hervor und bitten Sie um eine zweite Meinung aus dem Gastteam.
 ** Seien Sie höflich und erwarten Sie Höflichkeit von dem https://innersourcecommons.org/de/learn/learning-path/trusted-committer[_Trusted Committer's_] Review.
* Wenn Sie Pull Requests zu umfangreich gestalten, wird es schwieriger, sie zu prüfen, so dass es viel länger dauern wird, bis sie akzeptiert werden.
 ** Wenn Sie ein größeres Feature beisteuern, hilft es oft, es in mehrere Pull Requests aufzuteilen, die nacheinander eingereicht, geprüft und akzeptiert werden.
Sie können sie immer noch mit einem Issue zusammenbinden, auf das Sie sich beziehen.
  *** Einige Tools haben auch eine Draft / WIP Pull Request Funktion, die Sie benutzen können, um unfertige und nicht ausgefeilte Arbeit zu markieren und trotzdem frühes Feedback von den https://innersourcecommons.org/de/learn/learning-path/trusted-committer/02/[_Trusted Committers_] Ihres Host-Teams zu bekommen.
  *** Dies ermöglicht es Ihnen, sicherzustellen, dass Sie einen Weg einschlagen, den Ihr Gastgeberteam gerne zusammenführt, sobald es fertig ist, und hält sich in gewisser Weise an die Idee "release early, release often".
  *** Die Verantwortung des Gastgeberteams ist es, eine Atmosphäre zu schaffen, in der der Austausch und die Diskussion über nicht ganz ausgefeilte Arbeit möglich und willkommen ist. Wenn man nicht sicher sein kann, kann man nicht innovativ sein, und die Zusammenarbeit wird sehr schwierig.
  *** Versuchen Sie, ein Gleichgewicht zu finden zwischen der Bitte um eine frühzeitige Überprüfung und der Bereitstellung sinnvoller Änderungen zur Überprüfung.

=== Zusätzliche Artikel

Einige dieser Ressourcen sind möglicherweise hinter Bezahlschranken versteckt.
Manchmal hat Ihr Arbeitgeber ein Abonnement, das den Zugang ermöglicht, ansonsten erlauben öffentliche Universitätsbibliotheken oft auch den Zugang für Gäste.

==== https://doi.org/10.1109/MS.2013.95[Vertrauensbildung durch Zusammenarbeit]
