== Sicherstellung der Produktqualität

Lasst uns mit der wohl am häufigsten mit der Rolle des _Trusted Committers_ in Verbindung gebrachten Verantwortung beginnen: Sicherung der Produktqualität

In einer _InnerSource-Community_ sind die _Trusted Committer_ verantwortlich für alle technologisch basierten Entscheidungen, speziell diejenigen, die Einfluss auf die Produktqualität haben. Ownership bedeutet hier, sicherzustellen, dass getroffene Entscheidungen umgesetzt werden. Das schließt die Kommunikation dieser Entscheidungen und - falls notwendig - deren wirksame Vertretung innerhalb und außerhalb der _Community_ mit ein. Das bedeutet aber nicht, dass alle technischen Entscheidungen von den _Trusted Committer_ getroffen werden müssen, noch dass diese die komplette Implementierungsarbeit erledigen.

Die Aufgabe eines _Trusted Committer_ ist es, die Qualitätsstandards innerhalb ihrer _Community_ zu kommunizieren und zu erläutern, vor allem sie so zu formulieren, dass sie für ihre https://innersourcecommons.org/learn/learning-path/contributor[_Contributors_] verständlich und anwendbar sind. 
Dies beinhaltet natürlich auch die schriftliche Dokumentation, dies ist für eine _InnerSource-Community_ der effektivste Weg diese Standards vorzuleben und Beispiele zu geben. 

Wir glauben, dass es ein erstrebenswertes Ziel für eine _InnerSource-Community_ sein sollte, sich nicht nur in der Arbeitsorganisation von klassischen Entwicklungsprojekten zu unterscheiden, sondern auch in der Qualität der Software, die sie entwickelt. 
Softwarequalität auf höchstem Niveau ist eine Grundvoraussetzung, um Vertrauen seitens des Managements und der Benutzer in eine  _InnerSource-Community_ aufzubauen und aufrecht zu erhalten. 
Wir alle wissen, wie schnell dieses Vertrauen durch ein einziges fehlerhaftes Release erschüttert werden kann.

_Trusted Committer_ stellen außerdem sicher, das in der _Community_ die notwendige Infrastruktur und die notwendigen Tools zur Verfügung stehen, welche zur Entwicklung qualitativ hochwertiger Software benötigt werden.
Zur Sicherstellung der Qualität wird am häufigsten das _Peer Review_ genutzt, welches normalerweise Bestandteil der Pull Requests (PR's) ist.
Während für gewöhnlich jedermann Pull Requests starten und daran teilnehmen kann indem er auf notwendige Verbesserungen hinweist, ist es normalerweise nur dem _Trusted Committer_ möglich Beiträge zu akzeptieren oder abzulehnen.
Das ist es, was wir an anderer Stelle damit gemeint haben, wenn wir davon sprachen, dass "_Trusted Committer_ Code in Produktion bringen können". 
_Trusted Committer_ sollten den https://innersourcecommons.org/learn/learning-path/contributor[_Contributors_] auch während eines PR's helfen ihre Beiträge fertig zu stellen.

Dennoch ist es letztendlich die Aufgabe des _Contributors_, dies zu erreichen.
Es ist nicht Aufgabe eines _Trusted Committer_, alle Beiträge grundsätzlich zu akzeptieren, sondern nur diejenigen, die die definierten Kriterien bezüglich Qualität, Umfang und Projektausrichtung erfüllen. 
_Trusted Committer_ sollten vermeiden, den Code eines _Contributors_ selbst umzuschreiben, um ihn passend zu machen, selbst wenn dadurch ein höherer Aufwand bei der Unterstützung des https://innersourcecommons.org/learn/learning-path/contributor[_Contributors_] bei einem PR anfällt. _Trusted Committer_ nehmen eine längerfristige Perspektive ein und verstehen, dass diese Art der Unterstützung eine Investition in die Langlebigkeit der _Community_ darstellt und dies langfristig die Entwicklungsgeschwindigkeit der _Community_ erhöht.

Manchmal sind Anforderungen und Einschränkungen des Projekts nicht von vorne herein bekannt, sondern werden erst während der Entwicklung erkannt.
_Trusted Committer_ sind auch dafür verantwortlich, dass diese Ergebnisse erfasst und dokumentiert werden, so dass diese sowohl den https://innersourcecommons.org/learn/learning-path/product-owner[_Product Owners_] als auch den https://innersourcecommons.org/learn/learning-path/contributor[_Contributors_] zugänglich sind.

Der Aufgabenbereich des _Trusted Committer_ in Bezug auf Qualität geht über Pull Requests hinaus. 
_Trusted Committer_ betrachten Qualität als strategische Komponente und stellen die Langlebigkeit der zu erstellenden Software sicher. Dies beinhaltet codeorientierte Verantwortlichkeiten im Sinne von Verständlichkeit des Quellcodes bis hin zur Wahrung der konzeptionellen Integrität der gesamten Software.
Dazu gehören auch managementorientierte Aufgaben wie zum Beispiel sicherzustellen, dass die _Community_ genügend Zeit für Refaktorierung der Software hat, oder wenn nötig, die Verschiebung von Releaseterminen zugunsten der Verbesserung der Softwarequalität zu veranlassen.
Die Effektivität des _Trusted Committers_ hängt stark von der Wartbarkeit des Codes ab.

Fehlt letzteres, müssen die _Trusted Committer_ viel ihrer wertvollen Zeit investieren um Workarounds für Fehler oder anfällige Architektur zu validieren und zu dokumentieren. Dadurch haben sie nicht ausreichend Zeit, um https://innersourcecommons.org/learn/learning-path/contributor[_Contributors_] mit Onboarding und Mentoring zu unterstützen.

Zusammengefasst ist das Sicherstellen der Produktqualität eine Schlüsselverantwortung der _Trusted Committer_.
Sie bestimmen die Qualitätsstandards und gehen mit gutem Vorbild voran. Sie unterstützen bei Pull Requests und helfen den https://innersourcecommons.org/learn/learning-path/contributor[_Contributors_] die Qualitätsstandards zu erfüllen. 
Weiterhin übernehmen sie auch die Verantwortung für die langfristige Wartbarkeit und Qualität der Software. 
